 1:relation="stock.picking"
'backorder_id': fields.related('picking_id', 'backorder_id', type='many2one', 
relation="stock.picking", string="Back Order of", select=True),
2：digits=(16, 2)是表示2位小数        '
working_hours': fields.float('Working Hours', digits=(16, 2)),

3.字段加权限:implied_group
'group_multi_salesteams': fields.boolean("Organize Sales activities into multiple Sales Teams",
  
implied_group='base.group_multi_salesteams',
          
help="""Allows you to use Sales Teams to manage your leads and opportunities.""")

4.fields.selection :"Method"

 'method': fields.selection(_get_putaway_options, "Method", required=True),
 def _get_putaway_options(self, cr, uid, context=None):
        return [('fixed', 'Fixed Location')]

5. multi的用法：        
'rate_picking_backorders': fields.function(_get_picking_count,
  type='integer', multi='_get_picking_count'),

def _get_picking_count(self, cr, uid, ids, field_names, arg, context=None):
 
 
return result

6.store的用法：
'share': fields.function(_is_share, string='Share User', type='boolean',
 
 
store={
 
 'res.users': (lambda self, cr, uid, ids, c={}: ids, None, 50),
 
'res.groups': (_get_users_from_group, None, 50),
            },
 help="External user with limited access, created only for the purpose of sharing data."),

在store=True的情况下 函数还是在每次对象write的情况下都要执行一次


7.parent_left:

whs = wh_obj.search(cr, uid, [('view_location_id.parent_left', '<=', location.parent_left), 
 

('view_location_id.parent_right', '>=', location.parent_left)], context=context)


SELECT id FROM partner_category
    WHERE parent_left > 1 AND parent_left < 10

应该是 parent_left>1 parent_right<10


8.fnct_inv:的用法
     'invoice_state': fields.function(__get_invoice_state, type='selection', selection=[
 
           ("invoiced", "Invoiced"),
            ("2binvoiced", "To Be Invoiced"),
 
           ("none", "Not Applicable")
          ], string="Invoice Control", required=True,
 
       fnct_inv = _set_inv_state,
      
  store={
            'stock.picking': (lambda self, cr, uid, ids, c={}: ids, ['state'], 10),

            'stock.move': (__get_picking_move, ['picking_id', 'invoice_state'], 10),
        },
 ),



    def _set_inv_state(self, cr, uid, picking_id, name, value, arg, context=None):
 
       pick = self.browse(cr, uid, picking_id, context=context)
  
       moves = [x.id for x in pick.move_lines]
        
       move_obj= self.pool.get("stock.move")
        
       move_obj.write(cr, uid, moves, {'invoice_state': pick.invoice_state}, context=context)

9.track_visibility='always'  消息跟踪     
'name': fields.char('Name', track_visibility='always', readonly=True, copy=False),

10.digits_compute=dp.get_precision('Product Price') 精度
'list_price': fields.float('Sale Price', digits_compute=dp.get_precision('Product Price'),
 help="Base price to compute the customer price. Sometimes called the catalog price."),


11.track_visibility='onchange'
        'production_id': fields.many2one('mrp.production', 'Manufacturing Order',

            track_visibility='onchange', select=True, ondelete='cascade', required=True),